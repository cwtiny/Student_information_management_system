#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include "sqlite3.h"

#define DBNAME "data.db"
typedef unsigned char unchar;
typedef unsigned char unint;

typedef struct LNode
{
    unchar mID[20];
    unchar mName[20];
    unchar mAge;
    unchar mChineseScore;
    unchar mMathScore;
    struct LNode *next;

}LNode;

typedef struct LSTU
{
    int mID;
    char mName[20];
    int mAge;
    double mChineseScore;
    double mMathScore;
    struct LNode *next;

}LSTU;

void createStuTable();
void displayMenu();
void Menu();
void displayStu();
int selectGetTable(const char *sql);
void insertStu_ID(LNode *stu);
void insertStu_Name(LNode *stu);
void insertStu_Age(LNode *stu, LSTU *realStu);
void insertStu_Chinese(LNode *stu, LSTU *realStu);
void insertStu_Math(LNode *stu, LSTU *realStu);
void insertStu_All(LNode *stu, LSTU *realStu);
void insertStu();
void selectByID();
void selectStu();
void selectByGrade();
void selectByChinese();
void selectByMath();
void updateID(LNode *stu);
void updateName(LNode *stu);
void updateAge(LNode *stu);
void updateChinese(LNode *stu);
void updateMath(LNode *stu);
void deleteStuByID();
void deleteStuByName();
void deleteStu();
void updateStu();
void sortStu();
void sortStuByGrade();
void sortStuMethod(const char * method,const char *ascOr );
void sortStuBySum(const char *stuColname,const char * method,const char *ascOr );
static int callback(void *data, int argc, char **argv, char **stuColName);

int main()
{
    createStuTable();
    while(1)
        Menu();
    return 0;
}
void createStuTable()
{
    sqlite3 *db = NULL;
    char *errMsg = NULL;
    int ret=sqlite3_open(DBNAME,&db);
    if(ret != SQLITE_OK)
    {
        printf("打开数据库出错： %s",sqlite3_errmsg(db));
        exit(-1);
    }
    //创建表
    ret = sqlite3_exec(db,"create table if not exists stu(id int(10) PRIMARY Key not NULL,name char(20) NOT NULL,age int NOT NULL,Chinese int,Math int)",0,0,&errMsg);
    if(ret !=   SQLITE_OK)
    {
        sqlite3_close(db);
        printf("创建数据表出错：%s\n",errMsg);
        return ;
    }
}
void displayMenu()
{
    printf("\n");
    printf("****************************************************\n");
    printf(" ***************** 学生信息管理系统  ****************** \n");
    printf("Note:\n");
    printf("     ---------------          ---------------   \n");
    printf("     ******************************************** \n");
    printf("     * 0.帮助                 **  1.排序查找信息 * \n" );
    printf("     * 2.查询学生信息         **  3.修改学生信息 * \n");
    printf("     * 4.添加学生信息         **  5.删除学生信息 * \n");
    printf("     * 6.显示所有信息         **  7.退出         * \n");
    printf("     ********************************************\n");
    printf("     ---------------          ---------------   \n");
    printf("请选择对应序号（0―7）:\n");
}

void Menu()
{
    int num;
    displayMenu();
    scanf("%d",&num);
    getchar();
    switch (num) {
    case 0:
        printf("         ------------------------------\n");
        printf("         欢迎来到学生管理系统（数据库版）\n");
        printf("         ------------------------------\n");
        break;
    case 1:sortStu();
        break;
    case 2:selectStu();
        break;
    case 3:updateStu();
        break;
    case 4:insertStu();
        break;
    case 5:deleteStu();
        break;
    case 6:displayStu();
        break;
    case 7:exit(0);
        break;
    default:
        printf("请选择正确的序号输入（0-7）：\n");
    }
}
void displayStu()
{
    const char *select_query="select * from stu";
    selectGetTable(select_query);

    return;

}

void insertStu_ID(LNode *stu)
{
    do{
        printf("ID:\n");
        scanf("%s",stu->mID);
    }while(!isdigit(*stu->mID));

}
void insertStu_Name(LNode *stu)
{
    do{
        printf("姓名:\n");
        scanf("%s",stu->mName);
    }while(isdigit(*stu->mName));

}
void insertStu_Age(LNode *stu, LSTU *realStu)
{
    do{
        printf("年龄(0-100):\n");
        scanf("%s",&stu->mAge);
        realStu->mAge=atoi((const char *)&stu->mAge);
    }while(!isdigit(stu->mAge)||realStu->mAge<1||realStu->mAge>100);
}
void insertStu_Chinese(LNode *stu, LSTU *realStu)
{
    do{
        printf("语文(0-100):\n");
        scanf("%s",&stu->mChineseScore);
        realStu->mChineseScore=atof((const char *)&stu->mChineseScore);
    }while(!isdigit(stu->mChineseScore)||realStu->mChineseScore<0||realStu->mChineseScore>100);
}
void insertStu_Math(LNode *stu, LSTU *realStu)
{
    do{
        printf("数学(0-100):\n");
        scanf("%s",&stu->mMathScore);
        realStu->mMathScore=atof((const char *)&stu->mMathScore);
    }while(!isdigit(stu->mChineseScore)||realStu->mMathScore<0||realStu->mMathScore>100);
}
void insertStu_All(LNode *stu, LSTU *realStu)
{
    insertStu_ID(stu);
    insertStu_Name(stu);
    insertStu_Age(stu,realStu);
    insertStu_Chinese(stu,realStu);
    insertStu_Math(stu,realStu);
}
void insertStu()
{
    LNode stu;
    LSTU realStu;
    char insertStr[100] = "insert into stu values(";
    int i=1;

    while(1){
        printf("请输入第%d名学生信息：\n",i);
        insertStu_All(&stu,&realStu);
        strcpy(insertStr,"insert into stu values(");
        sprintf(insertStr,"%s %s,'%s',%d,%lf,%lf);",insertStr,stu.mID,stu.mName,realStu.mAge,realStu.mChineseScore,realStu.mMathScore);
        printf("%s\n",insertStr);
        if(!selectGetTable(insertStr))
        printf("\n第%d名学生信息添加成功！\n",i);
        else
        printf("\n第%d名学生信息添加失败！\n请校验ID是否重复！\n",i);

        char choice='y';
        printf("\n");
        printf("\n是否继续添加?(y/n)\n");
        fflush(stdin);//清除缓存区
        choice=getchar();
        getchar();
        if(choice!='y')
        {
            return;
        }
        ++i;
    }

}

void selectStu()
{
    int choice;
    printf("1.ID查询\n");
    printf("2.成绩查询\n");
    printf("3.返回\n");
    printf("请输入你的选择:\n");
    choice=getchar();
    getchar();

    while (choice>'3'||choice<'1')
    {
        printf("请输入正确的选择（1-3）\n");
        getchar();
        choice=getchar();

    }
    switch (choice) {
    case '1':selectByID();
        break;
    case '2':selectByGrade();
        break;
    case '3':return;
    default:
        break;
    }
}

void selectByID()
{
    LNode stu;
    char selectSql[100]="select * from stu where id = ";

    do
    {
        printf("输入学生ID:\n");
        scanf("%s",stu.mID);
    }while(!isdigit(*stu.mID));

    sprintf(selectSql,"%s%s;",selectSql,stu.mID);
    printf("%s\n",selectSql);
    selectGetTable(selectSql);
}
void selectByGrade()
{
    int choice;
    printf("1.已知语文成绩\n2.已知数学成绩\n3.返回\n");
    do{
        printf("请输入你的选择:\n");
        scanf("%d",&choice);
        getchar();
    }while(choice<1||choice>3);
    switch (choice) {
    case 1:selectByChinese();break;
    case 2:selectByMath();break;
    case 3:return;
    default:
        break;
    }
}
void selectByChinese()
{
    LNode stu;
    char selectSql[100]="select * from stu where Chinese = ";
    double chinese;

    do{
        printf("请输入语文成绩 (0-100):\n");
        scanf("%s",&stu.mChineseScore);
        //getchar();
        chinese = atof((const char*)&stu.mChineseScore);
    }while(!isdigit(stu.mChineseScore)||chinese<0||chinese>100);

    sprintf(selectSql,"%s%lf;",selectSql,chinese);
    printf("%s\n",selectSql);
    selectGetTable(selectSql);

}

void selectByMath()
{
    LNode stu;
    char selectSql[100]="select * from stu where math = ";
    double math;

    do{
        printf("请输入数学成绩(0-100):\n");
        scanf("%s",&stu.mMathScore);
        //getchar();
        math = atof((const char*)&stu.mMathScore);
    }while(!isdigit(stu.mMathScore)||math<0||math>100);

    sprintf(selectSql,"%s%lf;",selectSql,math);
    printf("%s\n",selectSql);
    selectGetTable(selectSql);
    //select_exec(selectSql);
}



void updateStu()
{
    LNode stu;
    int choice;
    do{
    printf("学生ID:\n");
    scanf("%s",stu.mID);
    //getchar();
    }while (!isdigit(*stu.mID));
    while (1){
        printf("选择修改ID：%s学生的信息 :\n"
               "1.ID\n2.姓名\n3.年龄\n4.语文\n5.数学\n6.返回\n",stu.mID);
        do
        {
            printf("请选择修改内容:\n");
            scanf("%d",&choice);
            getchar();
        }while(choice<1||choice>6);

        switch (choice) {
        case 1:updateID(&stu);
            break;
        case 2:updateName(&stu);
            break;
        case 3:updateAge(&stu);
            break;
        case 4:updateChinese(&stu);
            break;
        case 5:updateMath(&stu);
            break;
        default:
            return;
        }
    }

}
void updateID(LNode *stu)
{
    unchar newID[20];
    char updateSql[100]="update stu set ";
    do{
        printf("修改为:\n");
        scanf("%s",newID);
        //getchar();
    }while (!isdigit(*newID));
    sprintf(updateSql,"%s id = %d where id = %d;",updateSql,atoi((const char*)newID),atoi((const char*)stu->mID));
    printf("%s\n",updateSql);
    selectGetTable(updateSql);
    //strcpy(stu->mID,newID);
    printf("修改成功！\n");

}
void updateName(LNode *stu)
{
    char updateSql[100]="update stu set ";

    printf("修改为:\n");
    scanf("%s",stu->mName);
    //getchar();
    sprintf(updateSql,"%s name = '%s' where id = %d;",updateSql,stu->mName,atoi((const char*)stu->mID));

    printf("%s\n",updateSql);
    selectGetTable(updateSql);
    printf("修改成功!\n");
}
void updateAge(LNode *stu)
{
    char updateSql[100]="update stu set ";
    unchar age;

    do{
        printf("修改年龄为(1-100):\n");
        scanf("%s",&stu->mAge);
       // getchar();
        age = atoi((const char*)&stu->mAge);
    }while (!isdigit(stu->mAge)||age<=0||age>=100);

    sprintf(updateSql,"%s age = %d where id = %d;",updateSql,age,atoi((const char*)stu->mID));

    printf("%s\n",updateSql);
    selectGetTable(updateSql);
    printf("修改成功!\n");
}
void updateChinese(LNode *stu)
{
    char updateSql[100]="update stu set ";
    double chinese;

    do{
        printf("修改为（0-100）:\n");
        scanf("%s",&stu->mChineseScore);
       // getchar();
        chinese = atof((const char*)&stu->mChineseScore);
    }while(!isdigit(stu->mChineseScore)||chinese<0||chinese>100);

    sprintf(updateSql,"%s Chinese = %lf where id = %d;",updateSql,chinese,atoi((const char*)stu->mID));
    printf("%s\n",updateSql);
    selectGetTable(updateSql);
    printf("修改成功!\n");
}
void updateMath(LNode *stu)
{
    char updateSql[100]="update stu set ";
    double math;

    do{
        printf("修改为(0-100):\n");
        scanf("%s",&stu->mMathScore);
       // getchar();
        math = atof((const char*)&stu->mMathScore);
    }while(!isdigit(stu->mMathScore)||math<0||math>100);

    sprintf(updateSql,"%s math = %lf where id = %d;",updateSql,math,atoi((const char*)stu->mID));

    printf("%s\n",updateSql);
    selectGetTable(updateSql);
    printf("修改成功!\n");
}
void deleteStuByID()
{
    LNode stu;
    char deleteSql[100]="delete from stu where id = ";

    do{
        printf("请输入要删除的学生ID:\n");
        scanf("%s",stu.mID);
    }while(!isdigit(*stu.mID));

    sprintf(deleteSql,"%s%d;",deleteSql,atoi((const char*)stu.mID));

    selectGetTable(deleteSql);
    printf("删除成功!\n");

}
void deleteStuByName()
{
    LNode stu;
    char deleteSql[100]="delete from stu where name =";
    printf("请输入要删除的学生姓名:\n");
    scanf("%s",stu.mName);
    sprintf(deleteSql,"%s'%s';",deleteSql,stu.mName);
    selectGetTable(deleteSql);
    printf("delete succeed\n");
    return;
}
void deleteStu()
{
    int choice;
    printf("1.By学生ID:\n2.By学生姓名\n3.返回\n");
    do{
        printf("请选择（1-3）:\n");
        scanf("%d",&choice);
        getchar();
    }while (choice<=0||choice>3);
    switch(choice){
    case 1 : deleteStuByID();break;
    case 2 : deleteStuByName();break;
    case 3 : return;
    }
}
void sortStu()
{
    int choice;
    printf("1.ID（升序）\n2.成绩（降序）\n3.返回\n");
    do{
        printf("请选择（1-3）:\n");
        scanf("%d",&choice);
        getchar();
    }while(choice<1||choice>3);

    switch (choice) {
    case 1:sortStuMethod("id","ASC");
        break;
    case 2:sortStuByGrade();
        break;
    default:
        break;
    }
}

void sortStuByGrade()
{
    int choice;
    printf("1.语文成绩（降序）\n2.数学成绩（降序）\n3.总成绩（降序）\n4.总成绩（升序）\n5.返回\n");
    do{
        printf("请选择(1-5)：\n");
        scanf("%d",&choice);
        getchar();
    }while(choice<1||choice>5);

    switch (choice) {
        case 1:sortStuMethod("Chinese","DESC");
            break;
        case 2:sortStuMethod("math","DESC");
            break;
        case 3:sortStuBySum("id,name,sum(Chinese+math)","id","order by sum(Chinese+math) DESC");
            break;
        case 4:sortStuBySum("id,name,sum(Chinese+math)","id","order by sum(Chinese+math) ASC");
            break;
        case 5:return;
            break;
        default:
            break;
    }
}
void sortStuMethod(const char * method,const char *ascOr )
{
    char sortSql[100]="SELECT * FROM stu ORDER BY ";

    sprintf(sortSql,"%s %s %s;",sortSql,method,ascOr);
    printf("排序结果:\n");
    selectGetTable(sortSql);
    return;
}
void sortStuBySum(const char *stuColname,const char * method,const char *ascOr )
{

    char sortSql[100]="select";
    char *sortSql2=" FROM stu GROUP BY ";

    sprintf(sortSql,"%s %s %s %s %s;",sortSql,stuColname,sortSql2,method,ascOr);

    printf("%s\n",sortSql);
    printf("排序结果:\n");
    selectGetTable(sortSql);
    return;
}
void select_exec(const char* sql,char* callStr)
{
    sqlite3 *db = NULL;
    char *errMsg = NULL;

    int ret=sqlite3_open(DBNAME,&db);
    if(ret != SQLITE_OK)
    {
        printf("数据库打开出错： %s\n",sqlite3_errmsg(db));
        exit(-1);
    }
    ret = sqlite3_exec(db,sql,callback,callStr,&errMsg);
    if(ret != SQLITE_OK)
    {
        sqlite3_close(db);
        db=NULL;
        printf("\n出错,错误码：%s\n",errMsg);
        return ;
    }
    sqlite3_close(db);
    db=NULL;
    return;
}
int selectGetTable(const char *sql)
{
    sqlite3 *db;
    int nrow,ncolumn;
    char ** db_result;
    char *errMsg = NULL;
    int ret=sqlite3_open(DBNAME,&db);

    if(ret != SQLITE_OK)
    {
        printf("数据库打开出错：%s",sqlite3_errmsg(db));
        exit(-1);
    }
    ret = sqlite3_get_table(db,sql,&db_result,&nrow,&ncolumn,&errMsg);
    if(ret != SQLITE_OK)
    {
        printf("错误码：%s\n",errMsg);
        sqlite3_close(db);
        return 1 ;
    }
    for(int i=0;i<(nrow+1)*ncolumn;i+=ncolumn)
    {
        for(int j=0;j<ncolumn;j++)
        {
            printf("|");
            printf(" %s   ",db_result[i+j]);
        }
        printf("| \n");
    }

    sqlite3_close(db);
    db=NULL;
    return 0;
}
static int callback(void *data, int argc,char **argv,char **stuColName)
{
    static int num=1;
    printf("(%d).",num);
    ++num;
    fprintf(stderr,"%s", (const char* )data);
    for (int i=0;i<argc;i++)
    {
        printf("%s : %s\n",stuColName[i],argv[i]?argv[i]:"NULL");
    }
    printf("\n");
    return 0;
}

